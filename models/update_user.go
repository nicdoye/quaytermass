// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateUser Fields which can be updated in a user.
// swagger:model UpdateUser
type UpdateUser struct {

	// The user's email address
	Email string `json:"email,omitempty"`

	// Whether the user desires to receive an invoice email.
	InvoiceEmail bool `json:"invoice_email,omitempty"`

	// Custom email address for receiving invoices
	InvoiceEmailAddress string `json:"invoice_email_address,omitempty"`

	// The user's password
	Password string `json:"password,omitempty"`

	// tag expiration
	// Maximum: 2.592e+06
	// Minimum: 0
	TagExpiration *int64 `json:"tag_expiration,omitempty"`

	// The user's username
	Username string `json:"username,omitempty"`
}

// Validate validates this update user
func (m *UpdateUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTagExpiration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateUser) validateTagExpiration(formats strfmt.Registry) error {

	if swag.IsZero(m.TagExpiration) { // not required
		return nil
	}

	if err := validate.MinimumInt("tag_expiration", "body", int64(*m.TagExpiration), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("tag_expiration", "body", int64(*m.TagExpiration), 2.592e+06, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateUser) UnmarshalBinary(b []byte) error {
	var res UpdateUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
